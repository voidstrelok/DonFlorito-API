// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DonFlorito.Models
{
    public partial class DonFloritoContext : DbContext
    {
        public DonFloritoContext()
        {
        }

        public DonFloritoContext(DbContextOptions<DonFloritoContext> options)
            : base(options)
        {
        }

        public virtual DbSet<EstadoReserva> EstadoReserva { get; set; }
        public virtual DbSet<OrdenCompra> OrdenCompra { get; set; }
        public virtual DbSet<Parametros> Parametros { get; set; }
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<PrecioServicio> PrecioServicio { get; set; }
        public virtual DbSet<Reserva> Reserva { get; set; }
        public virtual DbSet<ReservaServicio> ReservaServicio { get; set; }
        public virtual DbSet<ReservasEspeciales> ReservasEspeciales { get; set; }
        public virtual DbSet<Servicio> Servicio { get; set; }
        public virtual DbSet<TipoServicio> TipoServicio { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Voucher> Voucher { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EstadoReserva>(entity =>
            {
                entity.Property(e => e.Nombre).IsRequired();
            });

            modelBuilder.Entity<OrdenCompra>(entity =>
            {
                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.HasOne(d => d.IdReservaNavigation)
                    .WithMany(p => p.OrdenCompra)
                    .HasForeignKey(d => d.IdReserva)
                    .HasConstraintName("FK_OrdenCompra_Reserva");
            });

            modelBuilder.Entity<Parametros>(entity =>
            {
                entity.Property(e => e.HoraApertura).HasColumnType("datetime");

                entity.Property(e => e.HoraCierre).HasColumnType("datetime");
            });

            modelBuilder.Entity<Persona>(entity =>
            {
                entity.Property(e => e.ApellidoMaterno).IsRequired();

                entity.Property(e => e.ApellidoPaterno).IsRequired();

                entity.Property(e => e.Email).IsRequired();

                entity.Property(e => e.Nombre).IsRequired();

                entity.Property(e => e.Rut)
                    .IsRequired()
                    .HasColumnName("RUT");

                entity.Property(e => e.SegundoNombre).IsRequired();
            });

            modelBuilder.Entity<PrecioServicio>(entity =>
            {
                entity.HasOne(d => d.IdTipoServicioNavigation)
                    .WithMany(p => p.PrecioServicio)
                    .HasForeignKey(d => d.IdTipoServicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrecioServicio_TipoServicio");
            });

            modelBuilder.Entity<Reserva>(entity =>
            {
                entity.Property(e => e.FechaCancelacion).HasColumnType("datetime");

                entity.Property(e => e.FechaConfirmacion).HasColumnType("datetime");

                entity.Property(e => e.FechaIngreso).HasColumnType("datetime");

                entity.Property(e => e.FechaReserva).HasColumnType("date");

                entity.HasOne(d => d.IdEstadoReservaNavigation)
                    .WithMany(p => p.Reserva)
                    .HasForeignKey(d => d.IdEstadoReserva)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reserva_EstadoReserva");

                entity.HasOne(d => d.IdPersonaNavigation)
                    .WithMany(p => p.Reserva)
                    .HasForeignKey(d => d.IdPersona)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reserva_Persona");
            });

            modelBuilder.Entity<ReservaServicio>(entity =>
            {
                entity.ToTable("Reserva_Servicio");

                entity.Property(e => e.HoraComienzo).HasColumnType("datetime");

                entity.HasOne(d => d.IdPrecioServicioNavigation)
                    .WithMany(p => p.ReservaServicio)
                    .HasForeignKey(d => d.IdPrecioServicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reserva_Servicio_PrecioServicio");

                entity.HasOne(d => d.IdReservaNavigation)
                    .WithMany(p => p.ReservaServicio)
                    .HasForeignKey(d => d.IdReserva)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reserva_Servicio_Reserva");

                entity.HasOne(d => d.IdServicioNavigation)
                    .WithMany(p => p.ReservaServicio)
                    .HasForeignKey(d => d.IdServicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reserva_Servicio_Servicio");
            });

            modelBuilder.Entity<ReservasEspeciales>(entity =>
            {
                entity.Property(e => e.FechaComienzo).HasColumnType("datetime");

                entity.Property(e => e.FechaTermino).HasColumnType("datetime");

                entity.HasOne(d => d.IdServicioNavigation)
                    .WithMany(p => p.ReservasEspeciales)
                    .HasForeignKey(d => d.IdServicio)
                    .HasConstraintName("FK_ReservasEspeciales_Servicio");

                entity.HasOne(d => d.IdTipoServicioNavigation)
                    .WithMany(p => p.ReservasEspeciales)
                    .HasForeignKey(d => d.IdTipoServicio)
                    .HasConstraintName("FK_ReservasEspeciales_TipoServicio");
            });

            modelBuilder.Entity<Servicio>(entity =>
            {
                entity.Property(e => e.Nombre).IsRequired();

                entity.HasOne(d => d.IdTipoServicioNavigation)
                    .WithMany(p => p.Servicio)
                    .HasForeignKey(d => d.IdTipoServicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servicio_TipoServicio");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.Property(e => e.Contraseña).IsRequired();

                entity.Property(e => e.Usuario1)
                    .IsRequired()
                    .HasColumnName("Usuario");

                entity.HasOne(d => d.IdPersonaNavigation)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.IdPersona)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuario_Persona");
            });

            modelBuilder.Entity<Voucher>(entity =>
            {
                entity.Property(e => e.AccountingDate).HasColumnName("accounting_date");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.AuthorizationCode).HasColumnName("authorization_code");

                entity.Property(e => e.Balance).HasColumnName("balance");

                entity.Property(e => e.BuyOrder).HasColumnName("buy_order");

                entity.Property(e => e.CardNumber).HasColumnName("card_number");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.InstallmentsAmount).HasColumnName("installments_amount");

                entity.Property(e => e.InstallmentsNumber).HasColumnName("installments_number");

                entity.Property(e => e.PaymentTypeCode).HasColumnName("payment_type_code");

                entity.Property(e => e.ResponseCode).HasColumnName("response_code");

                entity.Property(e => e.SessionId).HasColumnName("session_id");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.TransactionDate).HasColumnName("transaction_date");

                entity.Property(e => e.Vci).HasColumnName("vci");

                entity.HasOne(d => d.IdOrdenCompraNavigation)
                    .WithMany(p => p.Voucher)
                    .HasForeignKey(d => d.IdOrdenCompra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Voucher_OrdenCompra");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}